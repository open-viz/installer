{{- /*
Generated from 'persistentvolumesusage' from https://raw.githubusercontent.com/prometheus-operator/kube-prometheus/main/manifests/grafana-dashboardDefinitions.yaml
Do not change in-place! In order to change this file first read following link:
https://github.com/open-viz/installer/tree/master/charts/kube-grafana-dashboards/hack
*/ -}}
{{- $kubeTargetVersion := default .Capabilities.KubeVersion.GitVersion .Values.kubeTargetVersionOverride }}
{{- if and (semverCompare ">=1.14.0-0" $kubeTargetVersion) (semverCompare "<9.9.9-9" $kubeTargetVersion)  }}
apiVersion: openviz.dev/v1alpha1
kind: GrafanaDashboard
metadata:
  name: {{ printf "%s-%s" (include "kube-grafana-dashboards.fullname" $) "persistentvolumesusage" | trunc 63 | trimSuffix "-" }}
  namespace: {{ $.Release.Namespace }}
  labels:
    {{- include "kube-grafana-dashboards.labels" $ | nindent 4 }}
spec:
{{- if or $.Values.grafana.name $.Values.grafana.namespace }}
  grafanaRef:
  {{- with $.Values.grafana.name }}
    name: {{ . }}
  {{- end }}
  {{- with $.Values.grafana.namespace }}
    namespace: {{ . }}
  {{- end }}
{{- end }}
{{- with $.Values.dashboard.folderID }}
  folderID: {{ . }}
{{- end }}
  overwrite: {{ $.Values.dashboard.overwrite }}
  templatize:
    title: {{ $.Values.dashboard.templatize.title }}
    datasource: {{ $.Values.dashboard.templatize.datasource }}
  model:
    editable: false
    links:
    - asDropdown: true
      includeVars: true
      keepTime: true
      tags:
      - kubernetes-mixin
      targetBlank: false
      title: Kubernetes
      type: dashboards
    panels:
    - datasource:
        type: datasource
        uid: -- Mixed --
      fieldConfig:
        defaults:
          custom:
            fillOpacity: 10
            showPoints: never
            spanNulls: true
          unit: bytes
      gridPos:
        h: 7
        w: 18
        y: 0
      id: 1
      interval: 1m
      options:
        legend:
          asTable: true
          calcs:
          - lastNotNull
          displayMode: table
          placement: right
          showLegend: true
        tooltip:
          mode: single
      pluginVersion: v11.4.0
      targets:
      - datasource:
          type: prometheus
          uid: ${datasource}
        expr: "(\n  sum without(instance, node) (topk(1, (kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n  -\n  sum without(instance, node) (topk(1, (kubelet_volume_stats_available_bytes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n)\n"
        legendFormat: Used Space
      - datasource:
          type: prometheus
          uid: ${datasource}
        expr: 'sum without(instance, node) (topk(1, (kubelet_volume_stats_available_bytes{cluster="$cluster", job="kubelet", metrics_path="/metrics", namespace="$namespace", persistentvolumeclaim="$volume"})))

          '
        legendFormat: Free Space
      title: Volume Space Usage
      type: timeseries
    - datasource:
        type: datasource
        uid: -- Mixed --
      fieldConfig:
        defaults:
          color:
            mode: thresholds
          max: 100
          min: 0
          thresholds:
            mode: absolute
            steps:
            - color: green
              value: 0
            - color: orange
              value: 80
            - color: red
              value: 90
          unit: percent
      gridPos:
        h: 7
        w: 6
        x: 18
        y: 0
      id: 2
      interval: 1m
      pluginVersion: v11.4.0
      targets:
      - datasource:
          type: prometheus
          uid: ${datasource}
        expr: "max without(instance,node) (\n(\n  topk(1, kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n  -\n  topk(1, kubelet_volume_stats_available_bytes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n)\n/\ntopk(1, kubelet_volume_stats_capacity_bytes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})\n* 100)\n"
        instant: true
      title: Volume Space Usage
      type: gauge
    - datasource:
        type: datasource
        uid: -- Mixed --
      fieldConfig:
        defaults:
          custom:
            fillOpacity: 10
            showPoints: never
            spanNulls: true
          unit: none
      gridPos:
        h: 7
        w: 18
        y: 7
      id: 3
      interval: 1m
      options:
        legend:
          asTable: true
          calcs:
          - lastNotNull
          displayMode: table
          placement: right
          showLegend: true
        tooltip:
          mode: single
      pluginVersion: v11.4.0
      targets:
      - datasource:
          type: prometheus
          uid: ${datasource}
        expr: sum without(instance, node) (topk(1, (kubelet_volume_stats_inodes_used{cluster="$cluster", job="kubelet", metrics_path="/metrics", namespace="$namespace", persistentvolumeclaim="$volume"})))
        legendFormat: Used inodes
      - datasource:
          type: prometheus
          uid: ${datasource}
        expr: "(\n  sum without(instance, node) (topk(1, (kubelet_volume_stats_inodes{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n  -\n  sum without(instance, node) (topk(1, (kubelet_volume_stats_inodes_used{cluster=\"$cluster\", job=\"kubelet\", metrics_path=\"/metrics\", namespace=\"$namespace\", persistentvolumeclaim=\"$volume\"})))\n)\n"
        legendFormat: Free inodes
      title: Volume inodes Usage
      type: timeseries
    - datasource:
        type: datasource
        uid: -- Mixed --
      fieldConfig:
        defaults:
          color:
            mode: thresholds
          max: 100
          min: 0
          thresholds:
            mode: absolute
            steps:
            - color: green
              value: 0
            - color: orange
              value: 80
            - color: red
              value: 90
          unit: percent
      gridPos:
        h: 7
        w: 6
        x: 18
        y: 7
      id: 4
      interval: 1m
      pluginVersion: v11.4.0
      targets:
      - datasource:
          type: prometheus
          uid: ${datasource}
        expr: 'max without(instance,node) (

          topk(1, kubelet_volume_stats_inodes_used{cluster="$cluster", job="kubelet", metrics_path="/metrics", namespace="$namespace", persistentvolumeclaim="$volume"})

          /

          topk(1, kubelet_volume_stats_inodes{cluster="$cluster", job="kubelet", metrics_path="/metrics", namespace="$namespace", persistentvolumeclaim="$volume"})

          * 100)

          '
        instant: true
      title: Volume inodes Usage
      type: gauge
    refresh: 10s
    schemaVersion: 39
    tags:
    - kubernetes-mixin
    templating:
      list:
      - current:
          selected: true
          text: default
          value: default
        hide: 0
        label: Data source
        name: datasource
        query: prometheus
        regex: ''
        type: datasource
      - datasource:
          type: prometheus
          uid: ${datasource}
        hide: {{ if .Values.dashboard.multicluster.global.enabled }}0{{ else }}2{{ end }}
        label: cluster
        name: cluster
        query: label_values(kubelet_volume_stats_capacity_bytes{job="kubelet", metrics_path="/metrics"}, cluster)
        refresh: 2
        sort: 1
        type: query
      - datasource:
          type: prometheus
          uid: ${datasource}
        hide: 0
        label: Namespace
        name: namespace
        query: label_values(kubelet_volume_stats_capacity_bytes{cluster="$cluster", job="kubelet", metrics_path="/metrics"}, namespace)
        refresh: 2
        sort: 1
        type: query
      - datasource:
          type: prometheus
          uid: ${datasource}
        hide: 0
        label: PersistentVolumeClaim
        name: volume
        query: label_values(kubelet_volume_stats_capacity_bytes{cluster="$cluster", job="kubelet", metrics_path="/metrics", namespace="$namespace"}, persistentvolumeclaim)
        refresh: 2
        sort: 1
        type: query
    time:
      from: now-1h
      to: now
    timezone: '{{ .Values.grafana.defaultDashboardsTimezone }}'
    title: Kubernetes / Persistent Volumes
{{- end }}
