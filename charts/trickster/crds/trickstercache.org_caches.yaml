apiVersion: apiextensions.k8s.io/v1
kind: CustomResourceDefinition
metadata:
  annotations:
    controller-gen.kubebuilder.io/version: v0.10.0
  creationTimestamp: null
  name: caches.trickstercache.org
spec:
  group: trickstercache.org
  names:
    kind: Cache
    listKind: CacheList
    plural: caches
    singular: cache
  scope: Namespaced
  versions:
  - name: v1alpha1
    schema:
      openAPIV3Schema:
        description: Cache is the Schema for the caches API
        properties:
          apiVersion:
            description: 'APIVersion defines the versioned schema of this representation
              of an object. Servers should convert recognized schemas to the latest
              internal value, and may reject unrecognized values. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#resources'
            type: string
          kind:
            description: 'Kind is a string value representing the REST resource this
              object represents. Servers may infer this from the endpoint the client
              submits requests to. Cannot be updated. In CamelCase. More info: https://git.k8s.io/community/contributors/devel/sig-architecture/api-conventions.md#types-kinds'
            type: string
          metadata:
            type: object
          spec:
            description: CacheSpec defines the desired state of Cache
            properties:
              badger:
                description: Badger provides options for BadgerDB caching
                properties:
                  directory:
                    description: Directory represents the path on disk where the Badger
                      database should store data
                    type: string
                  value_directory:
                    description: ValueDirectory represents the path on disk where
                      the Badger database will store its value log.
                    type: string
                type: object
              bbolt:
                description: BBolt provides options for BBolt caching
                properties:
                  bucket:
                    description: Bucket represents the name of the bucket within BBolt
                      under which Trickster's keys will be stored.
                    type: string
                  filename:
                    description: Filename represents the filename (including path)
                      of the BotlDB database
                    type: string
                type: object
              filesystem:
                description: Filesystem provides options for Filesystem caching
                properties:
                  cache_path:
                    description: CachePath represents the path on disk where our cache
                      will live
                    type: string
                type: object
              index:
                description: Index provides options for the Cache Index
                properties:
                  flush_interval_ms:
                    description: FlushIntervalMS sets how often the Cache Index saves
                      its metadata to the cache from application memory
                    type: integer
                  max_size_backoff_bytes:
                    description: MaxSizeBackoffBytes indicates how far below max_size_bytes
                      the cache size must be to complete a byte-size-based eviction
                      exercise.
                    format: int64
                    type: integer
                  max_size_backoff_objects:
                    description: MaxSizeBackoffObjects indicates how far under max_size_objects
                      the cache size must be to complete object-size-based eviction
                      exercise.
                    format: int64
                    type: integer
                  max_size_bytes:
                    description: MaxSizeBytes indicates how large the cache can grow
                      in bytes before the Index evicts least-recently-accessed items.
                    format: int64
                    type: integer
                  max_size_objects:
                    description: MaxSizeObjects  indicates how large the cache can
                      grow in objects before the Index evicts least-recently-accessed
                      items.
                    format: int64
                    type: integer
                  reap_interval_ms:
                    description: ReapIntervalMS defines how long the Cache Index reaper
                      sleeps between reap cycles
                    type: integer
                type: object
              provider:
                description: 'Provider represents the type of cache that we wish to
                  use: "boltdb", "memory", "filesystem", or "redis"'
                type: string
              redis:
                description: Redis provides options for Redis caching
                properties:
                  client_type:
                    description: ClientType defines the type of Redis Client ("standard",
                      "cluster", "sentinel")
                    type: string
                  db:
                    description: DB is the Database to be selected after connecting
                      to the server.
                    type: integer
                  dial_timeout_ms:
                    description: DialTimeoutMS is the timeout for establishing new
                      connections.
                    type: integer
                  endpoint:
                    description: Endpoint represents FQDN:port or IP:Port of the Redis
                      Endpoint
                    type: string
                  endpoints:
                    description: Endpoints represents FQDN:port or IP:Port collection
                      of a Redis Cluster or Sentinel Nodes
                    items:
                      type: string
                    type: array
                  idle_check_frequency_ms:
                    description: IdleCheckFrequencyMS is the frequency of idle checks
                      made by idle connections reaper.
                    type: integer
                  idle_timeout_ms:
                    description: IdleTimeoutMS is the amount of time after which client
                      closes idle connections.
                    type: integer
                  max_conn_age_ms:
                    description: MaxConnAgeMS is the connection age at which client
                      retires (closes) the connection.
                    type: integer
                  max_retries:
                    description: MaxRetries is the maximum number of retries before
                      giving up on the command
                    type: integer
                  max_retry_backoff_ms:
                    description: MaxRetryBackoffMS is the Maximum backoff between
                      each retry.
                    type: integer
                  min_idle_conns:
                    description: MinIdleConns is the minimum number of idle connections
                      which is useful when establishing new connection is slow.
                    type: integer
                  min_retry_backoff_ms:
                    description: MinRetryBackoffMS is the minimum backoff between
                      each retry.
                    type: integer
                  password:
                    description: Password can be set when using password protected
                      redis instance.
                    type: string
                  pool_size:
                    description: PoolSize is the maximum number of socket connections.
                    type: integer
                  pool_timeout_ms:
                    description: PoolTimeoutMS is the amount of time client waits
                      for connection if all connections are busy before returning
                      an error.
                    type: integer
                  protocol:
                    description: Protocol represents the connection method (e.g.,
                      "tcp", "unix", etc.)
                    type: string
                  read_timeout_ms:
                    description: ReadTimeoutMS is the timeout for socket reads. If
                      reached, commands will fail with a timeout instead of blocking.
                    type: integer
                  sentinel_master:
                    description: SentinelMaster should be set when using Redis Sentinel
                      to indicate the Master Node
                    type: string
                  write_timeout_ms:
                    description: WriteTimeoutMS is the timeout for socket writes.
                      If reached, commands will fail with a timeout instead of blocking.
                    type: integer
                type: object
              secret:
                description: secret information about the secret data to project
                properties:
                  items:
                    description: items if unspecified, each key-value pair in the
                      Data field of the referenced Secret will be projected into the
                      volume as a file whose name is the key and content is the value.
                      If specified, the listed keys will be projected into the specified
                      paths, and unlisted keys will not be present. If a key is specified
                      which is not present in the Secret, the volume setup will error
                      unless it is marked optional. Paths must be relative and may
                      not contain the '..' path or start with '..'.
                    items:
                      description: Maps a string key to a path within a volume.
                      properties:
                        key:
                          description: key is the key to project.
                          type: string
                        mode:
                          description: 'mode is Optional: mode bits used to set permissions
                            on this file. Must be an octal value between 0000 and
                            0777 or a decimal value between 0 and 511. YAML accepts
                            both octal and decimal values, JSON requires decimal values
                            for mode bits. If not specified, the volume defaultMode
                            will be used. This might be in conflict with other options
                            that affect the file mode, like fsGroup, and the result
                            can be other mode bits set.'
                          format: int32
                          type: integer
                        path:
                          description: path is the relative path of the file to map
                            the key to. May not be an absolute path. May not contain
                            the path element '..'. May not start with the string '..'.
                          type: string
                      required:
                      - key
                      - path
                      type: object
                    type: array
                  name:
                    description: 'Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names
                      TODO: Add other useful fields. apiVersion, kind, uid?'
                    type: string
                  optional:
                    description: optional field specify whether the Secret or its
                      key must be defined
                    type: boolean
                type: object
                x-kubernetes-map-type: atomic
            type: object
          status:
            description: CacheStatus defines the observed state of Cache
            type: object
        type: object
    served: true
    storage: true
    subresources:
      status: {}
