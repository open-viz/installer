# Default values for trickster.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

# Docker registry fqdn used to pull app related images.
# Set this to use docker registry hosted at ${registryFQDN}/${registry}/${image}
registryFQDN: ghcr.io

# Docker registry containing app images
image:
  # Docker registry used to pull app container image
  registry: appscode
  # App container image
  repository: trickster
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name:

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 80

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts: # +doc-gen:break
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

tolerations: []

affinity: {}

monitoring:
  # Name of monitoring agent (eg "prometheus.io/operator")
  agent: ""
  port: 8080
  serviceMonitor:
    # Specify the labels for ServiceMonitor.
    # Prometheus crd will select ServiceMonitor using these labels.
    # Only usable when monitoring agent is `prometheus.io/operator`.
    labels: {}

sidecars:
  enable: false
  spec: # +doc-gen:break
  - args:
    - prom-auth
    env:
    - name: GOOGLE_APPLICATION_CREDENTIALS
      value: /data/credentials/google_application_credential.json
    image: ghcr.io/appscode/b3:v2023.03.02.8
    imagePullPolicy: Always
    name: auth
    ports:
    - containerPort: 4000
      name: auth
      protocol: TCP
    resources: {}
    terminationMessagePath: /dev/termination-log
    terminationMessagePolicy: File
    volumeMounts:
    - mountPath: /data
      name: data
    - mountPath: /data/b3/conf/app.ini
      name: bytebuilders-config
      subPath: app.ini
    - mountPath: /nats/creds
      name: nats-credentials
    - mountPath: /billing
      name: invoice-store
    - mountPath: /data/credentials/google_application_credential.json
      name: google-cred
      subPath: google_application_credential.json
  volumes: # +doc-gen:break
  - name: bytebuilders-config
    secret:
      defaultMode: 420
      secretName: bytebuilders-config
  - emptyDir: {}
    name: data
  - name: nats-credentials
    secret:
      defaultMode: 420
      secretName: nats-credentials
  - emptyDir: {}
    name: invoice-store
  - name: google-cred
    secret:
      defaultMode: 420
      secretName: google-cred
